namespace KafkaConsumer.Const
{
    public class KafkaConst
    {
        public const string GROUP_ID_CONFIG = "group.id";
        public const string GROUP_ID_DOC = "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using <code>subscribe(topic)</code> or the Kafka-based offset management strategy.";
        public const string GROUP_INSTANCE_ID_CONFIG = "group.instance.id";
        public const string GROUP_INSTANCE_ID_DOC = "A unique identifier of the consumer instance provided by end user. Only non-empty strings are permitted. If set, the consumer is treated as a member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.";
        public const string MAX_POLL_RECORDS_CONFIG = "max.poll.records";
        public const string MAX_POLL_RECORDS_DOC = "The maximum number of records returned in a single call to poll().";
        public const string MAX_POLL_INTERVAL_MS_CONFIG = "max.poll.interval.ms";
        public const string MAX_POLL_INTERVAL_MS_DOC = "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. ";
        public const string SESSION_TIMEOUT_MS_CONFIG = "session.timeout.ms";
        public const string SESSION_TIMEOUT_MS_DOC = "The timeout used to detect consumer failures when using Kafka's group management facility. The consumer sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this consumer from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by <code>group.min.session.timeout.ms</code> and <code>group.max.session.timeout.ms</code>.";
        public const string HEARTBEAT_INTERVAL_MS_CONFIG = "heartbeat.interval.ms";
        public const string HEARTBEAT_INTERVAL_MS_DOC = "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than <code>session.timeout.ms</code>, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.";
        public const string BOOTSTRAP_SERVERS_CONFIG = "bootstrap.servers";
        public const string CLIENT_DNS_LOOKUP_CONFIG = "client.dns.lookup";
        public const string ENABLE_AUTO_COMMIT_CONFIG = "enable.auto.commit";
        public const string ENABLE_AUTO_COMMIT_DOC = "If true the consumer's offset will be periodically committed in the background.";
        public const string AUTO_COMMIT_INTERVAL_MS_CONFIG = "auto.commit.interval.ms";
        public const string AUTO_COMMIT_INTERVAL_MS_DOC = "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if <code>enable.auto.commit</code> is set to <code>true</code>.";
        public const string PARTITION_ASSIGNMENT_STRATEGY_CONFIG = "partition.assignment.strategy";
        public const string PARTITION_ASSIGNMENT_STRATEGY_DOC = "The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used";
        public const string AUTO_OFFSET_RESET_CONFIG = "auto.offset.reset";
        public const string AUTO_OFFSET_RESET_DOC = "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): <ul><li>earliest: automatically reset the offset to the earliest offset<li>latest: automatically reset the offset to the latest offset</li><li>none: throw exception to the consumer if no previous offset is found for the consumer's group</li><li>anything else: throw exception to the consumer.</li></ul>";
        public const string FETCH_MIN_BYTES_CONFIG = "fetch.min.bytes";
        public const string FETCH_MIN_BYTES_DOC = "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.";
        public const string FETCH_MAX_BYTES_CONFIG = "fetch.max.bytes";
        public const string FETCH_MAX_BYTES_DOC = "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). Note that the consumer performs multiple fetches in parallel.";
        public const int DEFAULT_FETCH_MAX_BYTES = 52428800;
        public const string FETCH_MAX_WAIT_MS_CONFIG = "fetch.max.wait.ms";
        public const string FETCH_MAX_WAIT_MS_DOC = "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.";
        public const string METADATA_MAX_AGE_CONFIG = "metadata.max.age.ms";
        public const string MAX_PARTITION_FETCH_BYTES_CONFIG = "max.partition.fetch.bytes";
        public const string MAX_PARTITION_FETCH_BYTES_DOC = "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). See fetch.max.bytes for limiting the consumer request size.";
        public const int DEFAULT_MAX_PARTITION_FETCH_BYTES = 1048576;
        public const string SEND_BUFFER_CONFIG = "send.buffer.bytes";
        public const string RECEIVE_BUFFER_CONFIG = "receive.buffer.bytes";
        public const string CLIENT_ID_CONFIG = "client.id";
        public const string CLIENT_RACK_CONFIG = "client.rack";
        public const string RECONNECT_BACKOFF_MS_CONFIG = "reconnect.backoff.ms";
        public const string RECONNECT_BACKOFF_MAX_MS_CONFIG = "reconnect.backoff.max.ms";
        public const string RETRY_BACKOFF_MS_CONFIG = "retry.backoff.ms";
        public const string METRICS_SAMPLE_WINDOW_MS_CONFIG = "metrics.sample.window.ms";
        public const string METRICS_NUM_SAMPLES_CONFIG = "metrics.num.samples";
        public const string METRICS_RECORDING_LEVEL_CONFIG = "metrics.recording.level";
        public const string METRIC_REPORTER_CLASSES_CONFIG = "metric.reporters";
        public const string CHECK_CRCS_CONFIG = "check.crcs";
        public const string CHECK_CRCS_DOC = "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.";
        public const string KEY_DESERIALIZER_CLASS_CONFIG = "key.deserializer";
        public const string KEY_DESERIALIZER_CLASS_DOC = "Deserializer class for key that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.";
        public const string VALUE_DESERIALIZER_CLASS_CONFIG = "value.deserializer";
        public const string VALUE_DESERIALIZER_CLASS_DOC = "Deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.";
        public const string CONNECTIONS_MAX_IDLE_MS_CONFIG = "connections.max.idle.ms";
        public const string REQUEST_TIMEOUT_MS_CONFIG = "request.timeout.ms";
        public const string REQUEST_TIMEOUT_MS_DOC = "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.";
        public const string DEFAULT_API_TIMEOUT_MS_CONFIG = "default.api.timeout.ms";
        public const string DEFAULT_API_TIMEOUT_MS_DOC = "Specifies the timeout (in milliseconds) for consumer APIs that could block. This configuration is used as the default timeout for all consumer operations that do not explicitly accept a <code>timeout</code> parameter.";
        public const string INTERCEPTOR_CLASSES_CONFIG = "interceptor.classes";
        public const string INTERCEPTOR_CLASSES_DOC = "A list of classes to use as interceptors. Implementing the <code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code> interface allows you to intercept (and possibly mutate) records received by the consumer. By default, there are no interceptors.";
        public const string EXCLUDE_INTERNAL_TOPICS_CONFIG = "exclude.internal.topics";
        public const string EXCLUDE_INTERNAL_TOPICS_DOC = "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.";
        public const bool DEFAULT_EXCLUDE_INTERNAL_TOPICS = true;
        public const string LEAVE_GROUP_ON_CLOSE_CONFIG = "internal.leave.group.on.close";
        public const string ISOLATION_LEVEL_CONFIG = "isolation.level";
        public const string ISOLATION_LEVEL_DOC = "<p>Controls how to read messages written transactionally. If set to <code>read_committed</code>, consumer.poll() will only return transactional messages which have been committed. If set to <code>read_uncommitted</code>' (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode.</p> <p>Messages will always be returned in offset order. Hence, in  <code>read_committed</code> mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, <code>read_committed</code> consumers will not be able to read up to the high watermark when there are in flight transactions.</p><p> Further, when in <code>read_committed</code> the seekToEnd method will return the LSO";
        public const string DEFAULT_ISOLATION_LEVEL = "";
        public const string ALLOW_AUTO_CREATE_TOPICS_CONFIG = "allow.auto.create.topics";
        public const string ALLOW_AUTO_CREATE_TOPICS_DOC = "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using `auto.create.topics.enable` broker configuration. This configuration must be set to `false` when using brokers older than 0.11.0";
        public const bool DEFAULT_ALLOW_AUTO_CREATE_TOPICS = true;
    }
}
